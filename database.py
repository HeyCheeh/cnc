# импортируем встроенную в питон библиотеку sqlite3
import sqlite3

# Есть несколько способов создания базы данных в Python с помощью SQLite.
# Для этого используется объект Connection, который и представляет собой базу. Он создается с помощью функции connect().
# Создадим файл .db, поскольку это стандартный способ управления базой SQLite.
# Файл будет называться testdb.db. За соединение будет отвечать переменная conn.
conn = sqlite3.connect('testdb.db')
# Строка кода выше создает объект connection, а также новый файл orders.db в рабочей директории.
# Если нужно использовать другую, ее нужно обозначить явно:
# conn = sqlite3.connect(r'ПУТЬ-К-ПАПКИ/testdb.db')
# Если файл уже существует, то функция connect осуществит подключение к нему.
# Функция connect создает соединение с базой данных SQLite и возвращает объект, представляющий ее.

# Немного о резидентной бд
# Еще один способ создания баз данных с помощью SQLite в Python — создание их в памяти.
# Это отличный вариант для тестирования, ведь такие базы существуют только в оперативной памяти.
# conn = sqlite3.connect(:memory:)

# Создаем объект cursor
# После создания объекта соединения с базой данных нужно создать объект cursor. Он позволяет делать SQL-запросы к базе.
# Используем переменную cur для хранения объекта:
cur = conn.cursor()
# Далее выполнять запросы будем таким образом: cur.execute("ВАШ-SQL-ЗАПРОС-ЗДЕСЬ;")
# Важно!
# Сами запросы должны быть помещены в кавычки — это важно.
# Это могут быть одинарные, двойные или тройные кавычки.
# Последние используются в случае особенно длинных запросов, которые часто пишутся на нескольких строках.

# Создаем таблицы в нашей БД
# начнем с таблицы пользователей users
cur.execute("""CREATE TABLE IF NOT EXISTS users(
   userid INT PRIMARY KEY,
   fname TEXT,
   lname TEXT,
   gender TEXT,
   usertype TEXT);
""")
conn.commit()
print("Таблица users создана")
# В коде выше выполняются следующие операции:
# Функция execute отвечает за SQL-запрос
# SQL генерирует таблицу users
# IF NOT EXISTS поможет при попытке повторного подключения к базе данных. Запрос проверит, существует ли таблица.
# Если да — проверит, ничего ли не поменялось.
# Создаем первые 5 колонок: userid, fname, lname, gender и usertype. Userid — это основной ключ.
# Сохраняем изменения с помощью функции commit для объекта соединения.

# Создадим для примера таблицу с действиями пользователей
cur.execute("""CREATE TABLE IF NOT EXISTS useractions(
    actionid INT PRIMARY KEY,
    date TEXT,
    userid INT,
    action TEXT);
""")
conn.commit()
print("Таблица useractions создана")
# В результате мы получили базу данных с двумя таблицами, хранящими данные о юзерах и о действиях юзеров
# Данные таблицы являются примером.